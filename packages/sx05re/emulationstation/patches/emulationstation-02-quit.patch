diff U3 a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
--- a/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 16:55:16 2017
@@ -281,66 +281,41 @@
 			);
 	});
 
-	addEntry("QUIT", 0x777777FF, true,
+			addEntry("RETROARCH", 0x777777FF, true, 
+ 		[this] {
+						remove("/var/lock/start.games");
+						runSystemCommand("touch /var/lock/start.retro");
+						runSystemCommand("systemctl start retroarch.service");
+ 						SDL_Event ev;
+ 						ev.type = SDL_QUIT;
+ 						SDL_PushEvent(&ev);
+ 	});
+ 
+
+	addEntry("KODI", 0x777777FF, true, 
+ 		[this] {
+
+						remove("/var/lock/start.games");
+						runSystemCommand("touch /var/lock/start.kodi");
+						runSystemCommand("systemctl start kodi.service");
+ 						SDL_Event ev;
+ 						ev.type = SDL_QUIT;
+ 						SDL_PushEvent(&ev);
+ 	});
+ 
+	addEntry("REBOOT", 0x777777FF, true,
 		[this] {
-			auto s = new GuiSettings(mWindow, "QUIT");
-
-			Window* window = mWindow;
-
-			ComponentListRow row;
-			row.makeAcceptInputHandler([window] {
-				window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
-				[] {
-					if(quitES("/tmp/es-restart") != 0)
-						LOG(LogWarning) << "Restart terminated with non-zero result!";
-				}, "NO", nullptr));
-			});
-			row.addElement(std::make_shared<TextComponent>(window, "RESTART EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-			s->addRow(row);
-
-			row.elements.clear();
-			row.makeAcceptInputHandler([window] {
-				window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
-				[] {
-					if(quitES("/tmp/es-sysrestart") != 0)
-						LOG(LogWarning) << "Restart terminated with non-zero result!";
-				}, "NO", nullptr));
-			});
-			row.addElement(std::make_shared<TextComponent>(window, "RESTART SYSTEM", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-			s->addRow(row);
-
-			row.elements.clear();
-			row.makeAcceptInputHandler([window] {
-				window->pushGui(new GuiMsgBox(window, "REALLY SHUTDOWN?", "YES",
-				[] {
-					if(quitES("/tmp/es-shutdown") != 0)
-						LOG(LogWarning) << "Shutdown terminated with non-zero result!";
-				}, "NO", nullptr));
-			});
-			row.addElement(std::make_shared<TextComponent>(window, "SHUTDOWN SYSTEM", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-			s->addRow(row);
-
-			if(Settings::getInstance()->getBool("ShowExit"))
-			{
-				row.elements.clear();
-				row.makeAcceptInputHandler([window] {
-					window->pushGui(new GuiMsgBox(window, "REALLY QUIT?", "YES",
-					[] {
-						SDL_Event ev;
-						ev.type = SDL_QUIT;
-						SDL_PushEvent(&ev);
-					}, "NO", nullptr));
-				});
-				row.addElement(std::make_shared<TextComponent>(window, "QUIT EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-				s->addRow(row);
-			}
+						runRestartCommand();
+	});
 
-			mWindow->pushGui(s);
+	addEntry("SHUTDOWN", 0x777777FF, true, 
+		[this] {
+						runShutdownCommand();
 	});
 
 	mVersion.setFont(Font::get(FONT_SIZE_SMALL));
 	mVersion.setColor(0xC6C6C6FF);
-	mVersion.setText("EMULATIONSTATION V" + strToUpper(PROGRAM_VERSION_STRING));
+	mVersion.setText("EMULATIONSTATION V" + strToUpper(PROGRAM_VERSION_STRING)+" SX05RE v1.6.5");
 	mVersion.setAlignment(ALIGN_CENTER);
 
 	addChild(&mMenu);
--- a/es-app/src/main.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/main.cpp	Thu Jun 08 16:57:52 2017
@@ -256,6 +256,9 @@
 		window.pushGui(new GuiMsgBox(&window,
 			errorMsg,
 			"QUIT", [] { 
+                remove("/var/lock/start.games");
+				runSystemCommand("touch /var/lock/start.kodi");
+				runSystemCommand("systemctl start kodi.service");
 				SDL_Event* quit = new SDL_Event();
 				quit->type = SDL_QUIT;
 				SDL_PushEvent(quit);
--- a/es-core/src/platform.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-core/src/platform.cpp	Thu Jun 08 17:02:03 2017
@@ -43,20 +43,12 @@
 
 int runShutdownCommand()
 {
-#ifdef WIN32 // windows
-	return system("shutdown -s -t 0");
-#else // osx / linux
-	return system("sudo shutdown -h now");
-#endif
+return system("systemctl poweroff");
 }
 
 int runRestartCommand()
 {
-#ifdef WIN32 // windows
-	return system("shutdown -r -t 0");
-#else // osx / linux
-	return system("sudo shutdown -r now");
-#endif
+return system("systemctl reboot");
 }
 
 int runSystemCommand(const std::string& cmd_utf8)
